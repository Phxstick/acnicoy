__ Up next __
- Replace .button with actual button element (both in css and html)
- Allow temporary entries to be closed by clicking anywhere else
  --> Make into widgets?
- Add init step for downloading language packs
  --> Use sockets.io/websockets to receive data


__ BUGFIXES __
- Allow quickly switching between sections without opening multiple ones

__ General __
- Create a proper pointer cursor. Create better normal cursor as well
- Also use border gradients for shadowing
- Show interval time when hovering above SRS level somewhere
- Use inset shadows and class animations to design switch-buttons!
- For the time being, implement a little vocabulary backup system in order
  to not do this manually anymore.
- Check out new electron features?
- CSS containment to increase performance
- Make kana input entries type katakana when pressing shift.
  --> Also make into custom widget?
- When choosing comma as separator, allow escaping comma for single translations
- Implement global tooltip widget --> Add a function to HTMLElement prototype?
- Use popupMenu separators when context changes?
- How to prevent committing changes after every single db write?
  (And why do the changes in SRS tables cause no perceptible freezes?)
- Place [about] and [help] buttons somewhere suitable
- Use overlay to create [about], put credits there
- Replace native dialog windows with overlays
- Make custom stylable checkbox

__ Code __
- Use CSS variables for all widget styling
- Don't change event listeners in converter.js but change callback var instead?
- Remove inconsistencies in code, e.g. unify glossary ("word" <-> "entry")
- Rework edit-vocab-panel like edit-kanji-panel (only one function call for
  all the changes, everything logged in dataManager.vocab.editWord)!
--> Especially logging should be done by the datamanger since it's triggered
    by data changes and doesn't depend on the interface!!
- Try to generalize as much scss as possibly and extend base scss files.
- Remove "data" from content section and always access with "dataMap[...]"?
- Have htmlManager and cssManager which make sure all assets are only loaded
  once? --> Better performance, centralized resource loading
- Remove main.language/main.language2 ??
- Implement convenient "show"/"hide" methods which save last state in element!
- Use slots in custom components whereever useful
- Make automatically-loading-upon-scrolling-divs into widgets?

__ Init window __
- Make init section feel more welcoming and less plain. Background picture?

__ Main window __
- Make special popup list for language popup with two columns
  --> Second column contains number of current test items, highlighted if > 0
  --> Popup automatically uses text in left column only for label

__ Home section __
- When vocabulary is empty, write very small manual info card into intro section
- When vocabulary is not empty, display SRS table
- Create SRS bar diagram for more visual and quick information?
- Allow collapsing columns in SRS table (--> No partitioning by modes)
- Make changelog widget for pinwall
- Make widget-adder a widget aswell (only movable then)?
- Display adder-widget only when ctrl is pressed with cursor above section?
- Customizable bar diagram showing when new items for testing become available
  --> Maybe 1 week as standard interval

__ Popup-List __
- Make width of popuplist the width of largest item?


__ Test __
- Also construct extended solutions in _createTest already ?
- Properly handle overflow if correct-answer-frame gets too large
  --> Try to fade out items at bottom if list is too large,
      remove fading when bottom reached
- Possibly round up appearance time to e.g. 15 minutes
  ==> New stuff appears in batches, and a counter can be shown in intro section
- Write changed db entries async in small intervals to prevent data loss
- Show where the entry goes
- Animate everything (and have setting to to toggle that)

__ Kanji Info Panel __
- Allow seeing stroke animation instead of pictures (and customize speed)
- Use inverted index to quickly load kanji examples

__ Kanji __
- Possibly make mapping from kanji parts to actual parts in SVG drawing
  to make sure all parts are properly highlighted
- Show info for kanji that are part of the Chinese zodiac
- Show info for kanji that symbolize a country
- Have separate table for searching kanji, extend readings by ones without
  a ".", keep all meanings for each kanji


__ Edit vocab panel __
- Remove lists from select element where the word is already in?
  (How to do this most efficiently?)

__ Edit vocab panel __
- Create dataManager.kanji.add function for this

__ Vocab __
- Allow testing oneself on vocabulary lists (add test button in the section)
- Make sure changes to vocab lists are reflected in add vocab panel (events!)

__ Svg Bar Diagram __
- Terminology: Descriptions/Labels??

__ History __
- Completely rework history section
  --> Only store and display added entries and kanji

__ Dictionary __
- Display help info at center of section at the beginning and when the user
  presses enter on empty input or clicks some kind of help button
- Also make entries bigger and move to center when search result is empty
- Have setting which makes part-of-speech display in Japanese
- Use better fonts for small infos (see Jisho)

__ Stats/Achievements __
- Use single-bar diagram for kanji progress to display relative to total!
- Display earned achievement in status bar and make it glow golden to highlight
- Daily stats diagrams below the general stats, next to each other
    --> One for mastery points, one for new vocab/kanji added
    --> Allow displaying daily and cumulative progress for each daigram
    --> Also color each bar in two colors according to kanji and vocab progress
- Bar diagrams showing kanji learned by grade and JLPT next to each other
- Update at least general stats when words/kanji are added

__ Help __
- Use overlay widget


___ Future ____________________________________________________________________

- Consider making kanji-modes into single one with 2-3 parts for each kanji
  --> Very problematic for partly added kanji
  --> Would allow more stylish and compact mode presentation
  --> Would allow easier synchronization with Houhou SRS trainer
- [Consider overhaul of data storage --> Primarily use IDs for words?]
- Find monolingual dictionary for Japanese
- Add additional field to kanjiData database for "hidden acceptable meanings",
  containg synonyms or words with very similar meaning?
  --> Show option in test settings to turn hidden meanings on or off
  --> Allow displaying hidden meanings in kanji info
- Have invisible translations for synonyms/unnecessary words (e.g. AE <-> BE)

- Proper focus system with frames and elements for tabbing

content-section:
- Contains a database of custom info cards
- Allow uploading and sharing vocabulary lists
- Offer small coding environment for creating cards with HTML/CSS/JS


___ List of settings __________________________________________________________

[Data/General settings]
- [File-Dialog] Change data path

[Language settings]
- [Widget] Import/Download other language content data
- [Widget] Add/Remove/Rename Languages

[Test Settings]
- [Checkbox] Display test progress
- [Checkbox] Display score gained (Necessary?)
- [Checkbox] Color test item background according to test item type?
             (word, reading, on, kun, kanji meaning)
- [Widget] Setting SRS options
- [Checkbox] Allow ignoring answer per shortcut
     [Shortcut-Widget] Choose shortcut for ignoring answer

[Design Settings]
- [Checkbox] Animate test items
- [Checkbox] Fade test section background (only if colored-option is set)
- [Checkbox] Animate panels
- [Checkbox] Animate Popup stacks
- [Checkbox] Compress side bar into icons
- [Checkbox] Color Menu buttons
       --> If so: use menu colors in CSS-tricks.com for menu buttons
- [Listbox] Cursor selection (Some maybe habe to be unlocked)
       --> Especially drill cursor for large achievement (e.g. 1000 kanji)
- [Widget] Possibly color settings by changing and recompiling Sass

[Shortcuts]
- [Shortcut-widgets] For all known shortcuts in the settings


___ List of achievements ______________________________________________________

[Diversity] At least 5 languages registered.


___ Resources _________________________________________________________________

- http://www.tanos.co.uk/jlpt/skills/vocab/  (New JLPT stuff)
  --> Get JLPT lists for words too
- http://pj.ninjal.ac.jp/corpus_center/bccwj/en/freq-list.html  (Frequencies)
- http://hiramatu-hifuka.com/onyak/onyak2/josu-ta.html  (Counters)
- Kanji textbook/Internet frequencies?

- http://www.levelup99.net/businessmanner/cate3post24.html
  (5 types of honorific language, for content section)

- http://usabilitypost.com/2012/01/10/pressed-button-state-with-css3/#
  --> Use inset shadow to style <button>?

- For server hosting: 1. RedHat OpenShift, 2. Heroku, 3. 000webhost (PHP)
  --> Use flask(python) or express(nodejs)
 
- Use selection API  (window.getSelection(), selectionstart, selectionchanged)
  (http://caniuse.com/#feat=selection-api)
- Use native DOM manipulation convenience methods 
  (http://caniuse.com/#feat=dom-manip-convenience)
- Use Element.scrollIntoViewIfNeeded()
  (http://caniuse.com/#feat=scrollintoviewifneeded)
- http://caniuse.com/#feat=css-focus-within
- http://caniuse.com/#feat=css-scrollbar

- Use native browser notification popups?
- Chrome includes Googleâ€™s Native Client. Native Client allows web pages to run
  native code written in languages like C or C++. The code is executed in a
  sandbox for security, and it runs at almost-native speeds --> Nice


__ Steps to install __
1. Run npm install
2. Rebuild sqlite3 against electron:
   https://github.com/electron/electron/blob/master/docs/tutorial/using-native-node-modules.md
   (Build native node modules against electron. First method works.)
3. Download font-awesome, call folder "font-awesome", put it in base-directory
4. Download fonts, put "fonts" folder in base-directory
5. Download raw language data, adjust path to data in makefile
6. Run make
