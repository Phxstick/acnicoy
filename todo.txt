__ BUGFIXES __
- Use different random generator? Seed always generates about same sequence?
- Make sure Japanese-only stuff is closed when changing to other language
- Make edit panel inputs unpack when clicking somewhere else
- Issue with database modification speed? Or is it the JS overhead afterwards?
- Replace added-button in opened kanji-info-panel if kanji has been added
- details bar in kanji info panel does not wrap at all or incorrectly.
- info in details bar should properly be compressed if there are many readings
  or meanings
- Use "contentAvailable" object/function in content datamanager
  to make sure non-available stuff is closed
- Result in dictionary still not ordered correctly
- Whats taking so long when searching in dictionary? Measure everything.

__ Fundamentals (Data) __
- [Consider overhaul of data storage --> Primarily use IDs for words?]
- [Consider making kanji-modes into one with 2 to 3 parts for each kanji]
  ( --> Very problematic for partly added kanji)
- Add additional field to kanjiData database for "hidden acceptable meanings",
  containg synonyms or words with similar meaning
  --> Show option in test settings to turn hidden meanings on or off
  --> Allow displaying hidden meanings in kanji info

__ General __
- Find dictionary of monolingual descriptions (display in test after answer?)
- Create a proper pointer cursor. Create better normal cursor as well
- Also use border gradients for shadowing
- Allow temporary entries to be closed by clicking anywhere else
- Differentiate between dark button and light button?
- Where to put all the tons of update logic from eventEmitters?
- Make popupstack have expandable shadow when popping up to see borders clearly
- Show interval time when hovering above SRS level somewhere
- Use inset shadows and class animations to design switch-buttons!
- For the time being, implement a little vocabulary backup system in order
  to not do this manually anymore.
- Check out new electron features?
- Make language content optional and provide language packs for download?
- CSS containment to increase performance
- Use slots in custom components whereever useful
- Make automatically-loading-upon-scrolling-divs into widgets?
- Make kana input entries type katakana when pressing shift.
  --> Also make into custom widget?
- When choosing comma as separator, allow escaping comma for single translations
- Implement global tooltip widget --> Add a function to HTMLElement prototype?
- Backup codeMap in Dropbox
- Capture focus in panels?

__ Code __
- Also split js and css into sections/widgets/panels?
- Use CSS variables for all widget styling
- Replace .button with actual button element (both in css and html)
- Stop using things like 110% font everywhere - Use as standard font size in
  _base file instead or in some classes there
- Put font-awesome import in _base scss?
- Don't change event listeners in converter.js but change callback var instead?
- Put common code for panels in _panel.scss file and import everywhere?
- Put common panel code in TrainerPanel class and inherit everywhere?
- Remove inconsistencies in code, e.g. unify glossary ("word" <-> "entry")
- Make special function where all update logic is defined to keep code clean?
- Rewrite all sections like history section so that custom elements work
- Rework edit-vocab-panel like edit-kanji-panel (only one function call for
  all the changes, everything logged in dataManager.vocab.editWord)!
--> Especially logging should be done by the datamanger since it's triggered
    by data changes and doesn't depend on the interface!!
- Try to generalize as much scss as possibly and extend _base file.
  Split parts of _base file into smaller parts.
- Remove "data" from content section and always access with "dataMap[...]"?
- Use new version of custom elements (See resources)
- Import all widgets through code (even html ones?)
- Move root creation in sections to TrainerSection constructor?
- Use document fragment to insert stuff into search results

__ Init section __
- Open if dataPath in settings is empty
  => Require setting a data path then (use electrons file dialog here)
  => If data is found at fiven path, return, otherwise proceed to set first lang
- Have second part of init section to set first language
  => Also open if directory in dataPath is empty
- Allow user initializing with several languages at once
- Make frame feel 3D with shading effects/border

__ Loading screen __
- Have loading animation
- Have refreshing picture in the background

__ Main window __
- Make special popup list for language popup with two columns
  --> Second column contains number of current test items, highlighted if > 0
  --> Popup automatically uses text in left column only for label
- Add icons to the left of status message aswell?

__ Home section __
- When vocabulary is empty, write very small manual info card into intro section
- When vocabulary is not empty, display SRS table
- Create SRS bar diagram for more visual and quick information?
- Allow collapsing columns in SRS table (--> No partitioning by modes)
- Make changelog widget for pinwall
- Make widget-adder a widget aswell (only movable then)?
- Display adder-widget only when ctrl is pressed with cursor above section?
- Customizable bar diagram showing when new items for testing become available

__ Popup-Menu __
- Have one global popupmenu object (so that only one is always active)
- Allow filling popupmenu with an array of options (allows storing configs)
- Check if there is something selected and adjust popupwindow for copying etc.
  --> Make other copy options more detailed, e.g. "Copy kanji", "Copy word"

__ Popup-List __
- Make width of popupmenu the width of largest item?

__ Test __
- Also construct extended solutions in _createTest already ?
- Properly handle overflow if correct-answer-frame gets too large
  --> Try to fade out items at bottom if list is too large,
      remove fading when bottom reached
- Possibly round up appearance time to e.g. 15 minutes
  ==> New stuff appears in batches, and a counter can be shown in intro section
- Write changed db entries async in small intervals to prevent data loss
- Show where the entry goes
- Animate everything (and have setting to to toggle that)
- Have invisible translations for synonyms/unnecessary words (e.g. AE <-> BE)

__ Kanji Info Panel __
- Allow seeing stroke animation instead of pictures (and customize speed)
- Use inverted index to quickly load kanji examples

__ Kanji __
- Use bottom-animation to slide open kanji info panel (better performance)?
- Use selection colors when hovering over added kanji?
- Possibly make mapping from kanji parts to actual parts in SVG drawing
  to make sure all parts are properly highlighted
- Show info for kanji that are part of the Chinese zodiac
- Show info for kanji that symbolize a country
- Have separate table for searching kanji, extend readings by ones without
  a ".", keep all meanings for each kanji

__ Content __
- Contains a database of custom info cards
- Allow uploading and sharing vocabulary lists
- Offer small coding environment for creating cards with HTML/CSS/JS

__ Edit vocab panel __
- Remove lists from select element where the word is already in?
  (How to do this most efficiently?)

__ Edit vocab panel __
- Create dataManager.kanji.add function for this

__ Vocab __
- Allow testing oneself on vocabulary lists (add test button in the section)
- Make sure changes to vocab lists are reflected in add vocab panel (events!)

__ Svg Bar Diagram __
- Terminology: Descriptions/Labels??

__ History __
- Completely rework history section?
  --> Only display added entries and kanji?

__ Dictionary __
- Display help info at center of section at the beginning and when the user
  presses enter on empty input or clicks some kind of help button
- Also make entries bigger and move to center when search result is empty
- Have setting which makes part-of-speech display in Japanese
- Make each dict-entry a custom widget? Definitely place it in shadow DOM.
- Use better fonts for small infos (see Jisho)

__ Stats/Achievements __
- Use single-bar diagram for kanji progress to display relative to total!
- Display earned achievement in status bar and make it glow golden to highlight
- Daily stats diagrams below the general stats, next to each other
    --> One for mastery points, one for new vocab/kanji added
    --> Allow displaying daily and cumulative progress for each daigram
    --> Also color each bar in two colors according to kanji and vocab progress
- Bar diagrams showing kanji learned by grade and JLPT next to each other
- Update at least general stats when words/kanji are added

__ Help __
- Window? Section? Panel?
- Make overlay window widget for this?

List of settings:

[Data/General settings]
- [File-Dialog] Change data path

[Language settings]
- [Widget] Import/Download other language content data
- [Widget] Add/Remove/Rename Languages

[Test Settings]
- [Checkbox] Display test progress
- [Checkbox] Display score gained (Necessary?)
- [Checkbox] Color test item background according to test item type?
             (word, reading, on, kun, kanji meaning)
- [Widget] Setting SRS options
- [Checkbox] Allow ignoring answer per shortcut
     [Shortcut-Widget] Choose shortcut for ignoring answer

[Design Settings]
- [Checkbox] Animate test items
- [Checkbox] Fade test section background (only if colored-option is set)
- [Checkbox] Animate panels
- [Checkbox] Animate Popup stacks
- [Checkbox] Compress side bar into icons
- [Checkbox] Color Menu buttons
       --> If so: use menu colors in CSS-tricks.com for menu buttons
- [Listbox] Cursor selection (Some maybe habe to be unlocked)
       --> Especially drill cursor for large achievement (e.g. 1000 kanji)
- [Widget] Possibly color settings by changing and recompiling Sass

[Shortcuts]
- [Shortcut-Widget] Ignoring answer in test section
- [Shortcut-Widgets] Shortcuts for opening sections or panels


__ Resources __
- http://www.tanos.co.uk/jlpt/skills/vocab/  (New JLPT stuff)
  --> Get JLPT lists for words too
- http://pj.ninjal.ac.jp/corpus_center/bccwj/en/freq-list.html  (Frequencies)
- http://hiramatu-hifuka.com/onyak/onyak2/josu-ta.html  (Counters)
- Kanji textbook/Internet frequencies?

- http://www.levelup99.net/businessmanner/cate3post24.html
  (5 types of honorific language, for content section)

- http://usabilitypost.com/2012/01/10/pressed-button-state-with-css3/#
  --> Use inset shadow to style <button>?

- http://stackoverflow.com/questions/13151693/passing-arguments-to-require-when-loading-module
  --> Use for parameterizing datamanagers?
https://developers.google.com/web/fundamentals/primers/shadowdom/
https://developers.google.com/web/fundamentals/primers/customelements/
https://davidwalsh.name/css-js-animation  <-- Replace jQuery with better stuff

- https://www.thebalance.com/free-cloud-storage-1356638
  Free cloud storage services to save trainer resources and data!
- For server hosting: 1. RedHat OpenShift, 2. Heroku, 3. 000webhost (PHP)
  --> Use flask(python) or express(nodejs)
 
- Use native string "includes" function instead of "contains"
- Shadow DOM v1 (http://caniuse.com/#feat=shadowdomv1)
- Use selection API  (window.getSelection(), selectionstart, selectionchanged)
  (http://caniuse.com/#feat=selection-api)
- Use native DOM manipulation conventience methods 
  (http://caniuse.com/#feat=dom-manip-convenience)
- Use Element.scrollIntoViewIfNeeded()
  (http://caniuse.com/#feat=scrollintoviewifneeded)
- http://caniuse.com/#feat=css-focus-within
- http://caniuse.com/#feat=css-scrollbar

https://github.com/electron/electron/blob/master/docs/tutorial/using-native-node-modules.md
(Build native node modules like sqlite3 against electron. First method works.)
