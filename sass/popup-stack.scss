@import "mixins";

$border-radius: var(--border-radius, 5px);

:host {
  display: flex;
  align-items: stretch;
  align-content: stretch;

  &[disabled] {
    --shadow-color: transparent;
  }
}

:host([animate]) {
  ::slotted(option) {
    transition: border-radius 0.3s;
  }
  #shadow {
    transition: box-shadow 0.3s;
  }
}

:host([direction="right"]), :host(:not([direction])) {
  #frame.opened {
    ::slotted(option:first-child) {
      border-top-left-radius: $border-radius;
      border-bottom-left-radius: $border-radius;
    }
    ::slotted(option:last-child) {
      border-top-right-radius: $border-radius;
      border-bottom-right-radius: $border-radius;
    }
  }
}

:host([direction="left"]) {
  #frame.opened {
    ::slotted(option:first-child) {
      border-top-right-radius: $border-radius;
      border-bottom-right-radius: $border-radius;
    }
    ::slotted(option:last-child) {
      border-top-left-radius: $border-radius;
      border-bottom-left-radius: $border-radius;
    }
  }
}

:host([direction="up"]) {
  #frame.opened {
    ::slotted(option:first-child) {
      border-bottom-right-radius: $border-radius;
      border-bottom-left-radius: $border-radius;
    }
    ::slotted(option:last-child) {
      border-top-right-radius: $border-radius;
      border-top-left-radius: $border-radius;
    }
  }
}

:host([direction="down"]) {
  #frame.opened {
    ::slotted(option:first-child) {
      border-top-right-radius: $border-radius;
      border-top-left-radius: $border-radius;
    }
    ::slotted(option:last-child) {
      border-bottom-right-radius: $border-radius;
      border-bottom-left-radius: $border-radius;
    }
  }
}

#frame {
  position: relative;
  min-width: 10px;
  min-height: 10px;
  width: 100%;
  height: 100%;

  &.opened {
    ::slotted(option), ::slotted(option:checked) {
      border-radius: 0;
    }
  
    #shadow {
      box-shadow: 0 0 3px 1px var(--shadow-color, transparent);
    }
  }
}

#shadow {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  box-shadow: none;
  border-radius: $border-radius;
  // TODO: use attr-function or css variable to keep equal to attribute value
}

::slotted(option) {
  @include center-content;
  width: 100%;
  height: 100%;
  position: absolute !important;  // Tooltip shouldn't override this
  left: 0;
  top: 0;
  padding: 0px;
  cursor: pointer;
  // Give higher border radius so they won't show through below selected option
  border-radius: calc(#{$border-radius} + 3px);
  // TODO: use attr-function or css variable to keep equal to attribute value
}

::slotted(option:checked) {
  border-radius: $border-radius;
}
